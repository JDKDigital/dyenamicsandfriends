buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
    }
}
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
plugins {
    id 'eclipse'
    id 'maven-publish'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

//jarJar.enable()

version = "${mod_version}"
group = 'cy.jdkdigital.dyenamicsandfriends' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'dyenamicsandfriends'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'parchment', version: '2022.11.27-1.19.2'

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'dyenamicsandfriends'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                dyenamicsandfriends {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'dyenamicsandfriends'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                dyenamicsandfriends {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'dyenamicsandfriends'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                dyenamicsandfriends {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'dyenamicsandfriends', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                dyenamicsandfriends {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    flatDir {
        dir 'libs'
    }
    maven {
        url "https://www.cursemaven.com"
    }
    maven { // TOP
        name 'tterrag maven'
        url 'https://maven.tterrag.com/'
    }
    maven { // JEI
        url 'https://dvs1.progwml6.com/files/maven'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

//    compileOnly fg.deobf("mezz.jei:jei-1.19.2:11.5.0.297:api")
    implementation fg.deobf("curse.maven:jei-238222:4239206")
    implementation fg.deobf("curse.maven:the-one-probe-245211:3965693")

    implementation fg.deobf("libs:dyenamics-1.19.2:2.0.0")
//    implementation fg.deobf("libs:supplementaries-1.19.2:2.3.13")
    implementation fg.deobf("libs:suppsquared-1.19.2:1.0.14")
//    implementation fg.deobf("libs:chalk-1.19.2:1.5.1")

//    jarJar(group: 'cofh.dyenamics', name: 'dyenamics', version: '[1.0.0,)') {
//        transitive(false)
//    }

    implementation fg.deobf("curse.maven:autoreglib-250363:4100299")
    implementation fg.deobf("curse.maven:selene-499980:4545412") // supplementaries, sleep tight
    implementation fg.deobf("curse.maven:balm-531761:3914527")
    implementation fg.deobf("curse.maven:bookshelf-228525:4153136") // botany pots
    implementation fg.deobf("curse.maven:blueprint-382216:4019850") // clayworks
//    implementation fg.deobf("curse.maven:ctm-267602:3933537") // chipped
    implementation fg.deobf("curse.maven:architectury-api-419699:4476084") // furnish
    implementation fg.deobf("curse.maven:terrablender-563928:4205732") // regions unexplored

    implementation fg.deobf("curse.maven:create-328085:4547147")
//    implementation fg.deobf("curse.maven:create-deco-509285:4183385")
    implementation fg.deobf("curse.maven:another-furniture-610492:4675539")
    implementation fg.deobf("curse.maven:chalk-533748:4571278")
    implementation fg.deobf("curse.maven:comforts-276951:4977779")
    implementation fg.deobf("curse.maven:openblocks-elevator-250832:4086868")
    implementation fg.deobf("curse.maven:farmers-delight-398521:4636013")
    implementation fg.deobf("curse.maven:snowy-spirit-566142:4263819")
    implementation fg.deobf("curse.maven:supplementaries-412082:4615838")
//    implementation fg.deobf("curse.maven:supplementaries-squared-838411:4484170")
    implementation fg.deobf("curse.maven:waystones-245755:3901921")
    implementation fg.deobf("curse.maven:quark-243121:4587248")
    implementation fg.deobf("curse.maven:furnish-547069:4510804")
    implementation fg.deobf("curse.maven:skinned-lanterns-414154:3970173")
    implementation fg.deobf("curse.maven:nightlights-651876:4063048")
    implementation fg.deobf("curse.maven:mrcrayfish-furniture-mod-55438:3907425")
    implementation fg.deobf("curse.maven:handcrafted-538214:4215477")
    implementation fg.deobf("curse.maven:botany-pots-353928:4514735")
    implementation fg.deobf("curse.maven:oreganized-769203:4377982")
    implementation fg.deobf("curse.maven:the-bumblezone-forge-362479:4417670")
//    implementation fg.deobf("curse.maven:glazed-resymmetry-714619:4403239")
//    implementation fg.deobf("curse.maven:ceramics-250617:4049193")
    implementation fg.deobf("curse.maven:clayworks-592162:4396960")
//    implementation fg.deobf("curse.maven:chipped-456956:4434885")
    implementation fg.deobf("curse.maven:sleep-tight-817564:4554340")
    implementation fg.deobf("curse.maven:regions-unexplored-659110:4470188")
}

//tasks.jarJar.configure {
//    classifier ''
//}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "Dyenamics and Friends",
                "Specification-Vendor"    : "JDK Digital",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "JDK Digital",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

//reobf { jarJar { } }

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}